﻿類別---屬性
    ---方法---一般方法
	   ---類別方法
	   ---建構子

學生student類別 name score屬性
	 getname() setscore()方法

==============================================
物件(實體) Peter Amy
Peter Amy 有 Student 類別的屬性和方法
Peter 有 name score屬性 getname() setscore()方法

class Student{
	public String name;
	public int score;

	public void getName(){
		return name;
	}
	public void setScore(){
		score = s;
	}
}

public class class_test{
	public static void main(String[] args){
		Student Peter = new Student();
		Peter.setName("Peter");
		Peter.score = 100;

		Student Amy = new Student();
		Amy.setName("Amy");
		Amy.score = 80;
	}


}
==============================================
建構子(建構子前面不得加任何修飾，而且名字要和類別名稱一模一樣)

Student(String n, int s){
	name = n;
	score = s;
}

一般來說，沒有手動宣告任何建構子時，程式會有隱藏建構子
public Student(){}
但如果有像上面這樣手動宣告，則要另外增加空建構子，否則空的就不會當作可用實例
所以兩者皆要使用的話，應該是
public Student(){

}
public Student(String n, int s){
	name = n;
	score = s;
}
兩者並存
==============================================
類別方法，類別方法又稱靜態方法，
所以宣告方法的時候加一個 static 就可以
呼叫的時候，不需要建立物件就可以呼叫

範例兩者合一:

class Student{
	public String name;
	public int score;

	Student(String n, int s){
		name = n;	
		score = s;
	}
	public void getName(){
		return name;
	}
	public void setScore(int s){
		score = s;
	}
	public static void helloWorld(){
		System.out.println("Hello, World");
	}
}

public class class_test{
	public static void main(String[] args){
		Student Peter = new Student("Peter,100");
		Student Amy = new Student("Amy",80);

		Student.helloWorld();
	}

}

==============================================
封裝(抽象)

封裝(Encapsulation)，簡單來說就是抽象(Abstract)的概念。
對一件事情只需要理解他的外在就好，不需要了解裡面內部的構造。
就像我們只要知道看電視的時候該怎麼轉台、調音量，並不需要知道裡面有多少電線和構造。

而我們在寫類別的時候，把類別定義完，
之後要寫物件就只要指定屬性和方法就好，
並不需要知道方法是怎麼實作的。這也是一種封裝性。

==============================================
繼承(Inheritance)

class Car{
	public String plate;
	public String brand;
	public String color;
}

class Taxi extends Car{
	public String plate;
	public String brand;
	public String color;
	public String driver;
}

==============================================
多型

多個相同名稱的方法，傳入不同的參數，會執行不同的敘述

我們通常會一層一層的呼叫執行程式

比方說，一個計算面積的方法，如果傳入一個參數，
就當正方形來算面積；傳入兩個參數，就當成長方形來算面積


在這裡，因只傳入一個參數，所以定義上這是個正方形(長寬相等)
所以這支程式真正做的事情是：定義出寬度，並呼叫長方形計算method
public int computeArea(int length){
	// return length * length;
	int width = length;	// 此行也可省略，像上面這樣直接傳入兩個length
	return computeArea(length, width);
}

這個可以當作最底層的執行(長*寬)
public int computeArea(int length, int width){
	return length * width;
}